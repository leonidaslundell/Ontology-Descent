facet_wrap(~clusterName, ncol = 1, strip.position = "left")+
scale_shape_manual(values = c(25,24), name = "Direction")+
scale_fill_manual(values = col, name = "Cluster")+
scale_color_manual(values = col, name = "Cluster")+
scale_x_continuous("-log10 P Value", limits = xlim, breaks = seq(xlim[1], xlim[2], 1))+
theme(axis.title.y = element_blank(), strip.placement = "outside",
strip.text.y = element_text(angle = 0))
ggplot(plot, aes(x = -log10(pValue), y = direction,
fill = clusterName, color = clusterName,
label = ontoID, label2 = ontoTerm, label3 = enrichmentScore))+
geom_point(size = 3)+
facet_wrap(~clusterName, ncol = 1, strip.position = "left")+
scale_shape_manual(values = c(25,24), name = "Direction")+
scale_fill_manual(values = col, name = "Cluster")+
scale_color_manual(values = col, name = "Cluster")+
scale_x_continuous("-log10 P Value", limits = xlim, breaks = seq(xlim[1], xlim[2], 1))+
theme(axis.title.y = element_blank(), strip.placement = "outside",
strip.text.y = element_text(angle = 180))
ggplot(plot, aes(x = -log10(pValue), y = direction,
fill = clusterName, color = clusterName,
label = ontoID, label2 = ontoTerm, label3 = enrichmentScore))+
geom_point(size = 3)+
facet_wrap(~clusterName, ncol = 1, strip.position = "left")+
scale_shape_manual(values = c(25,24), name = "Direction")+
scale_fill_manual(values = col, name = "Cluster")+
scale_color_manual(values = col, name = "Cluster")+
scale_x_continuous("-log10 P Value", limits = xlim, breaks = seq(xlim[1], xlim[2], 1))+
theme(axis.title.y = element_blank(), strip.placement = "outside",
strip.text.y.left = element_text(angle = 180))
ggplot(plot, aes(x = -log10(pValue), y = direction,
fill = clusterName, color = clusterName,
label = ontoID, label2 = ontoTerm, label3 = enrichmentScore))+
geom_point(size = 3)+
facet_wrap(~clusterName, ncol = 1, strip.position = "left")+
scale_shape_manual(values = c(25,24), name = "Direction")+
scale_fill_manual(values = col, name = "Cluster")+
scale_color_manual(values = col, name = "Cluster")+
scale_x_continuous("-log10 P Value", limits = xlim, breaks = seq(xlim[1], xlim[2], 1))+
theme(axis.title.y = element_blank(), strip.placement = "outside",
strip.text.y.left = element_text(angle = 0))
ggplot(plot, aes(x = -log10(pValue), y = direction,
fill = clusterName, color = clusterName,
label = ontoID, label2 = ontoTerm, label3 = enrichmentScore))+
geom_point(size = 3)+
facet_wrap(~clusterName, ncol = 1, strip.position = "left")+
scale_shape_manual(values = c(25,24), name = "Direction")+
scale_fill_manual(values = col, name = "Cluster")+
scale_color_manual(values = col, name = "Cluster")+
scale_x_continuous("-log10 P Value", limits = xlim, breaks = seq(xlim[1], xlim[2], 1))+
theme(axis.title.y = element_blank(), strip.placement = "outside",
strip.text.y.left = element_text(angle = 0),
panel.spacing.y = unit(0, "line"))
ggplot(plot, aes(x = -log10(pValue), y = direction,
fill = clusterName, color = clusterName,
label = ontoID, label2 = ontoTerm, label3 = enrichmentScore))+
geom_point(size = 3)+
facet_wrap(~clusterName, ncol = 1, strip.position = "left")+
scale_shape_manual(values = c(25,24), name = "Direction")+
scale_fill_manual(values = col, name = "Cluster")+
scale_color_manual(values = col, name = "Cluster")+
scale_x_continuous("-log10 P Value", limits = xlim, breaks = seq(xlim[1], xlim[2], 1))+
theme(axis.title.y = element_blank(),
strip.placement = "outside", strip.text.y.left = element_text(angle = 0),
strip.background = element_blank(), panel.spacing.y = unit(0, "line"))
plotEnrichment = TRUE
ontoID <- example_data$ontoID
ontoTerm <- example_data$ontoTerm
pValue <- example_data$pValue
clusterNumber <- example_data$clusterNumber
clusterName <- example_data$clusterName
enrichmentScore <- example_data$enrichmentScore
direction <- example_data$direction
plotEnrichment = TRUE
interactive = FALSE
# Create plot data.frame depending on input
plot <- data.frame(ontoID, ontoTerm, pValue, clusterNumber, clusterName)
if (!is.null(enrichmentScore)){plot$enrichmentScore <- enrichmentScore}
if (!is.null(direction)){plot$direction <- direction}
# Set color palette
col <- colorRampPalette(brewer.pal(9, "Set1"))((length(unique(plot$clusterName))))
plot <- plot[order(plot$clusterNumber, plot$enrichmentScore),]
plot$ontoID <- factor(plot$ontoID, levels = unique(plot$ontoID))
plot$ontoTerm <- factor(plot$ontoTerm, levels = unique(plot$ontoTerm))
plot$clusterName <- factor(plot$clusterName, levels = unique(plot$clusterName))
xlim <- c(-ceiling(max(abs(plot$enrichmentScore))),ceiling(max(abs(plot$enrichmentScore))))
p <- ggplot(plot, aes(x = enrichmentScore, y = clusterName,
fill = clusterName, color = clusterName,
label = ontoID, label2 = ontoTerm, label3 = pValue))+
geom_vline(xintercept = 0, lty = "dashed")+
geom_point(pch = 21, size = 3)+
scale_x_continuous("Enrichment Score", limits = xlim, breaks = seq(xlim[1], xlim[2], 1))+
scale_fill_manual(values = col, name = "Cluster")+
scale_color_manual(values = col, name = "Cluster")+
theme(axis.title.y = element_blank())
p
rm(list = ls())
devtools::load_all()
runApp('inst/application')
dev.off()
dev.off()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
clusterGraph(example_data$ontoID, example_data$ontoTerm, example_data$pValue,
example_data$clusterNumber, example_data$clusterName, example_data$enrichmentScore,
example_data$direction, FALSE, FALSE)
isTRUE(input$plotType)
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
dev.off()
runApp('inst/application')
nrow(example_data[1:50,])
devtools::load_all()
runApp('inst/application')
dev.off()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
dev.off()
dev.off()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
dev.off()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
input$axisType
devtools::load_all()
input$axisType
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
dev.off()
source('~/Work/Ontology-Descent/R/plotMS.R', echo=TRUE)
rm(list = ls())
rm(list = ls())
devtools::load_all()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
rm(list = ls())
rm(list = ls())
devtools::load_all()
runApp('inst/application')
shiny::runApp('inst/application')
shiny::runApp('inst/application')
devtools::load_all()
runApp('inst/application')
runApp('inst/application')
devtools::load_all()
shiny::runApp('inst/application')
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
ggplot2::ggplot(data = NULL, ggplot2::aes(1:10, 1:10))+
ggplot2::geom_point()+
ggplot2::theme(axis.title.y = ggplot2::element_blank())
devtools::load_all()
runApp('inst/application')
devtools::load_all()
shiny::runApp('inst/application')
runApp('inst/application')
shiny::runApp('inst/application')
devtools::load_all()
library(devtools)
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
test <- c("P Value" = FALSE, "Enrichment Score" = TRUE)
test[1]
isTRUE(test[1])
isTRUE(test[2])
devtools::load_all(".")
runApp('inst/application')
?switch
source('~/.active-rstudio-document', echo=TRUE)
library(shiny)
ui <- fluidPage(
radioButtons(input$test, label = "Axis Type",
choices = c("P Value" = FALSE, "Enrichment Score" = TRUE),
selected = FALSE)
textOutput(output$test)
)
server <- function(input, output, session) {
output$test <- renderText(switch(input$test,
TRUE = "Life",
FALSE = "Sucks"
)
)
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$test <- renderText(switch(input$test,
TRUE = "Life",
FALSE = "Sucks"
)
)
}
rm(list = ls())
library(devtools)
devtools::load_all(".")
shiny::runApp('inst/application')
runApp('inst/application')
devtools::load_all()
shiny::runApp('inst/application')
devtools::load_all()
runApp('inst/application')
devtools::load_all()
devtools::load_all()
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
devtools::load_all()
runApp('inst/application')
library(devtools)
devtools::load_all(".")
shiny::runApp('inst/application')
devtools::load_all(".")
shiny::runApp('inst/application')
shiny
library(shiny)
devtools::load_all(".")
shiny::runApp('inst/application')
devtools::load_all(".")
shiny::runApp('inst/application')
devtools::load_all(".")
shiny::runApp('inst/application')
devtools::load_all(".")
shiny::runApp('inst/application')
devtools::load_all(".")
shiny::runApp('inst/application')
?reactiveVal
devtools::load_all()
shiny::runApp('inst/application')
devtools::load_all()
shiny::runApp('inst/application')
devtools::load_all(".")
shiny::runApp('inst/application')
devtools::load_all(".")
devtools::load_all(".")
shiny::runApp('inst/application')
colnames(example_data)
devtools::load_all(".")
colnames(example_data)
shiny::runApp('inst/application')
devtools::load_all(".")
shiny::runApp('inst/application')
devtools::load_all(".")
shiny::runApp('inst/application')
source('~/Work/Ontology-Descent/R/plotting_page.R', echo=TRUE)
rm(list = ls())
devtools::load_all(".")
shiny::runApp('inst/application')
devtools::load_all(".")
shiny::runApp('inst/application')
devtools::load_all(".")
shiny::runApp('inst/application')
source('~/Work/Ontology-Descent/R/plotting_page.R', echo=TRUE)
rm(list = ls())
devtools::load_all(".")
shiny::runApp('inst/application')
colnames(example_data)
devtools::load_all(".")
shiny::runApp('inst/application')
shiny::runApp('inst/application')
library(devtools)
devtools::load_all(".")
shiny::runApp('inst/application')
devtools::load_all(".")
shiny::runApp('inst/application')
library(devtools)
shiny::runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
?ggsave
devtools::load_all(".")
runApp('inst/application')
devtools::load_all(".")
runApp('inst/application')
devtools::load_all(".")
devtools::load_all(".")
ggplot2::ggsave(file, plot = plotOut, device = "png", width = 5, height = 5, units = "cm", dpi = 75)
devtools::load_all(".")
runApp('inst/application')
?downloadHandler
library(ggplot2)
p <- ggplot(data = NULL, aes(1:10, 1:10))+geom_point()
p
ggsave("test.png", p)
?downloadHandler
devtools::load_all(".")
runApp('inst/application')
rm(list = ls())
devtools::load_all(".")
runApp('inst/application')
library(devtools)
library(devtools)
devtools::load_all("~/Work/Ontology-Descent")
shiny::runApp()
devtools::load_all("~/Work/Ontology-Descent")
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
devtools::load_all("~/Work/Ontology-Descent")
runApp()
?downloadButton
devtools::load_all("~/Work/Ontology-Descent")
?ggsave
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
runApp()
?selectInput
devtools::load_all("~/Work/Ontology-Descent")
runApp()
?switch
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
?numericInput
devtools::load_all("~/Work/Ontology-Descent")
runApp()
fluidPage(
titlePanel("Ontology Descent: Plotting Enrichment"),
fluidRow(
column(width = 4,
wellPanel(
h3("Plot Options:"),
radioButtons(inputId = ns("plotType"), label = "Plot Type",
choices = c("By Pathway" = "pth", "By Cluster" = "clust"),
selected = "clust"),
radioButtons(inputId = ns("axisType"), label = "Axis Type",
choices = c("P Value" = "p", "Enrichment Score" = "e"),
selected = "p"),
actionButton(inputId = ns("actPlot"), label = "Show plot")
),
wellPanel(
h3("Download Options:"),
selectInput(inputId = ns("fileType"), label = "File Type",
choices = c("tiff", "png", "eps", "ps", "tex", "pdf",
"jpeg", "bmp", "svg", "wmf"),
selected = "tiff", multiple = FALSE),
numericInput(inputId = ns("plotHt"), label = "Height", min = 2, max = 50,
value = 10, step = .5),
numericInput(inputId = ns("plotWd"), label = "Width", min = 2, max = 50,
value = 10, step = .5),
downloadButton(outputId = ns("plotDwnld"), label = "Download Plot")
)
),
column(width = 8,
plotOutput(outputId = ns("plotOut")),
textOutput(outputId = ns("pathWarning")),
textOutput(outputId = ns("crap"))
)
)
)
rm(list = ls())
devtools::load_all("~/Work/Ontology-Descent")
runApp()
?ggsave
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp('inst/application')
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp('inst/application')
devtools::load_all("~/Work/Ontology-Descent")
runApp()
runApp()
?column
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
?column
runApp()
?absolutePanel
?inputPanel
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
source('~/Work/Ontology-Descent/R/bckup.R', echo=TRUE)
rm(list = ls())
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
devtools::load_all("~/Work/Ontology-Descent")
runApp()
source('~/Work/Ontology-Descent/R/plotting_page.R', echo=TRUE)
rm(list = ls())
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
devtools::load_all("~/Work/Ontology-Descent")
runApp()
